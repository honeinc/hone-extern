{
version: 3,
file: "chartist.min.js",
sources: [
"chartist.js"
],
names: [
"root",
"factory",
"exports",
"module",
"define",
"amd",
"this",
"Chartist",
"version",
"window",
"document",
"noop",
"n",
"alphaNumerate",
"String",
"fromCharCode",
"extend",
"target",
"source",
"prop",
"getHeight",
"svgElement",
"clientHeight",
"Math",
"round",
"getBBox",
"height",
"parentNode",
"getWidth",
"clientWidth",
"width",
"createSvg",
"query",
"className",
"svg",
"container",
"nodeType",
"querySelector",
"undefined",
"_ctChart",
"attr",
"removeAllClasses",
"addClass",
"empty",
"appendChild",
"_node",
"getDataArray",
"data",
"array",
"i",
"series",
"length",
"normalizeDataArray",
"dataArray",
"j",
"orderOfMagnitude",
"value",
"floor",
"log",
"abs",
"LN10",
"projectLength",
"bounds",
"options",
"availableHeight",
"getAvailableHeight",
"range",
"chartPadding",
"axisX",
"offset",
"getHighLow",
"highLow",
"high",
"Number",
"MAX_VALUE",
"low",
"getBounds",
"normalizedData",
"referenceValue",
"newMin",
"newMax",
"max",
"min",
"valueRange",
"oom",
"pow",
"ceil",
"step",
"numberOfSteps",
"axisY",
"scaleMinSpace",
"values",
"push",
"calculateLabelOffset",
"labelClass",
"labelInterpolationFnc",
"offsetFnc",
"interpolated",
"label",
"elem",
"dx",
"dy",
"text",
"remove",
"interpolateData",
"callback",
"index",
"interpolatedValue",
"polarToCartesian",
"centerX",
"centerY",
"radius",
"angleInDegrees",
"angleInRadians",
"PI",
"x",
"cos",
"y",
"sin",
"createChartRect",
"xAxisOffset",
"yAxisOffset",
"x1",
"y1",
"x2",
"y2",
"createXAxis",
"chartRect",
"grid",
"labels",
"forEach",
"pos",
"showGrid",
"classNames",
"horizontal",
"join",
"showLabel",
"createYAxis",
"vertical",
"labelAlign",
"text-anchor",
"projectPoint",
"optionsProvider",
"defaultOptions",
"responsiveOptions",
"optionsChangedCallbackFnc",
"applyOptions",
"currentOptions",
"baseOptions",
"mql",
"matchMedia",
"matches",
"mediaQueryListeners",
"addListener",
"catmullRom2bezier",
"crp",
"z",
"d",
"iLen",
"p",
"name",
"attributes",
"parent",
"node",
"Object",
"keys",
"key",
"setAttribute",
"createElementNS",
"svgns",
"_ctSvgElement",
"t",
"createTextNode",
"firstChild",
"removeChild",
"classes",
"getAttribute",
"trim",
"split",
"names",
"concat",
"filter",
"self",
"indexOf",
"removeClass",
"removedClasses",
"_parent",
"Line",
"createChart",
"seriesGroups",
"chart",
"point",
"pathCoordinates",
"showPoint",
"showLine",
"svgPathString",
"lineSmooth",
"cr",
"k",
"l",
"line",
"changedOptions",
"addEventListener",
"update",
"Bar",
"zeroPoint",
"biPol",
"periodHalfWidth",
"bar",
"seriesBarDistance",
"barClasses",
"thin",
"thick",
"Pie",
"determineAnchorPosition",
"center",
"direction",
"toTheRight",
"labelRadius",
"totalDataSum",
"startAngle",
"total",
"reduce",
"previousValue",
"currentValue",
"donut",
"donutWidth",
"labelOffset",
"endAngle",
"start",
"end",
"arcSweep",
"path",
"slice",
"style",
"labelPosition",
"labelDirection",
"labelOverflow"
],
mappings: "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",
sourcesContent: [
"(function(root, factory) { if(typeof exports === 'object') { module.exports = factory(); } else if(typeof define === 'function' && define.amd) { define([], factory); } else { root['Chartist'] = factory(); } }(this, function() { /* Chartist.js 0.1.11 * Copyright © 2014 Gion Kunz * Free to use under the WTFPL license. * http://www.wtfpl.net/ */ /** * The core module of Chartist that is mainly providing static functions and higher level functions for chart modules. * * @module Chartist.Core */ // This object is prepared for export via UMD var Chartist = {}; Chartist.version = '0.1.11'; (function (window, document, Chartist) { 'use strict'; // Helps to simplify functional style code Chartist.noop = function (n) { return n; }; // Generates a-z from number Chartist.alphaNumerate = function (n) { // Limit to a-z return String.fromCharCode(97 + n % 26); }; // Simple recursive object extend Chartist.extend = function (target, source) { target = target || {}; for (var prop in source) { if (typeof source[prop] === 'object') { target[prop] = Chartist.extend(target[prop], source[prop]); } else { target[prop] = source[prop]; } } return target; }; // Get element height / width with fallback to svg BoundingBox or parent container dimensions // See https://bugzilla.mozilla.org/show_bug.cgi?id=530985 Chartist.getHeight = function (svgElement) { return svgElement.clientHeight || Math.round(svgElement.getBBox().height) || svgElement.parentNode.clientHeight; }; Chartist.getWidth = function (svgElement) { return svgElement.clientWidth || Math.round(svgElement.getBBox().width) || svgElement.parentNode.clientWidth; }; // Create Chartist SVG element Chartist.createSvg = function (query, width, height, className) { // Get dom object from query or if already dom object just use it var container = query.nodeType ? query : document.querySelector(query), svg; // If container was not found we throw up if (!container) { throw 'Container node with selector "' + query + '" not found'; } // If already contains our svg object we clear it, set width / height and return if (container._ctChart !== undefined) { svg = container._ctChart.attr({ width: width || '100%', height: height || '100%' }).removeAllClasses().addClass(className); // Clear the draw if its already used before so we start fresh svg.empty(); } else { // Create svg object with width and height or use 100% as default svg = Chartist.svg('svg').attr({ width: width || '100%', height: height || '100%' }).addClass(className); // Add the DOM node to our container container.appendChild(svg._node); container._ctChart = svg; } return svg; }; // Convert data series into plain array Chartist.getDataArray = function (data) { var array = []; for (var i = 0; i < data.series.length; i++) { // If the series array contains an object with a data property we will use the property // otherwise the value directly (array or number) array[i] = typeof(data.series[i]) === 'object' && data.series[i].data !== undefined ? data.series[i].data : data.series[i]; } return array; }; // Add missing values at the end of the arrays Chartist.normalizeDataArray = function (dataArray, length) { for (var i = 0; i < dataArray.length; i++) { if (dataArray[i].length === length) { continue; } for (var j = dataArray[i].length; j < length; j++) { dataArray[i][j] = 0; } } return dataArray; }; Chartist.orderOfMagnitude = function (value) { return Math.floor(Math.log(Math.abs(value)) / Math.LN10); }; Chartist.projectLength = function (svg, length, bounds, options) { var availableHeight = Chartist.getAvailableHeight(svg, options); return (length / bounds.range * availableHeight); }; Chartist.getAvailableHeight = function (svg, options) { return Chartist.getHeight(svg._node) - (options.chartPadding * 2) - options.axisX.offset; }; // Get highest and lowest value of data array Chartist.getHighLow = function (dataArray) { var i, j, highLow = { high: -Number.MAX_VALUE, low: Number.MAX_VALUE }; for (i = 0; i < dataArray.length; i++) { for (j = 0; j < dataArray[i].length; j++) { if (dataArray[i][j] > highLow.high) { highLow.high = dataArray[i][j]; } if (dataArray[i][j] < highLow.low) { highLow.low = dataArray[i][j]; } } } return highLow; }; // Find the highest and lowest values in a two dimensional array and calculate scale based on order of magnitude Chartist.getBounds = function (svg, normalizedData, options, referenceValue) { var i, newMin, newMax, bounds = Chartist.getHighLow(normalizedData); // Overrides of high / low from settings bounds.high = options.high || (options.high === 0 ? 0 : bounds.high); bounds.low = options.low || (options.low === 0 ? 0 : bounds.low); // Overrides of high / low based on reference value, it will make sure that the invisible reference value is // used to generate the chart. This is useful when the chart always needs to contain the position of the // invisible reference value in the view i.e. for bipolar scales. if (referenceValue || referenceValue === 0) { bounds.high = Math.max(referenceValue, bounds.high); bounds.low = Math.min(referenceValue, bounds.low); } bounds.valueRange = bounds.high - bounds.low; bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange); bounds.min = Math.floor(bounds.low / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom); bounds.max = Math.ceil(bounds.high / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom); bounds.range = bounds.max - bounds.min; bounds.step = Math.pow(10, bounds.oom); bounds.numberOfSteps = Math.round(bounds.range / bounds.step); // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace while (true) { var length = Chartist.projectLength(svg, bounds.step / 2, bounds, options); if (length >= options.axisY.scaleMinSpace) { bounds.step /= 2; } else { break; } } // Narrow min and max based on new step newMin = bounds.min; newMax = bounds.max; for (i = bounds.min; i <= bounds.max; i += bounds.step) { if (i + bounds.step < bounds.low) { newMin += bounds.step; } if (i - bounds.step > bounds.high) { newMax -= bounds.step; } } bounds.min = newMin; bounds.max = newMax; bounds.range = bounds.max - bounds.min; bounds.values = []; for (i = bounds.min; i <= bounds.max; i += bounds.step) { bounds.values.push(i); } return bounds; }; Chartist.calculateLabelOffset = function (svg, data, labelClass, labelInterpolationFnc, offsetFnc) { var offset = 0; for (var i = 0; i < data.length; i++) { // If interpolation function returns falsy value we skipp this label var interpolated = labelInterpolationFnc(data[i], i); if (!interpolated && interpolated !== 0) { continue; } var label = svg.elem('text', { dx: 0, dy: 0 }, labelClass).text('' + interpolated); // Check if this is the largest label and update offset offset = Math.max(offset, offsetFnc(label._node)); // Remove label after offset Calculation label.remove(); } return offset; }; // Used to iterate over array, interpolate using a interpolation function and executing callback (used for rendering) Chartist.interpolateData = function (data, labelInterpolationFnc, callback) { for (var index = 0; index < data.length; index++) { // If interpolation function returns falsy value we skipp this label var interpolatedValue = labelInterpolationFnc(data[index], index); if (!interpolatedValue && interpolatedValue !== 0) { continue; } callback(data, index, interpolatedValue); } }; Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) { var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0; return { x: centerX + (radius * Math.cos(angleInRadians)), y: centerY + (radius * Math.sin(angleInRadians)) }; }; // Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right Chartist.createChartRect = function (svg, options, xAxisOffset, yAxisOffset) { return { x1: options.chartPadding + yAxisOffset, y1: (options.height || Chartist.getHeight(svg._node)) - options.chartPadding - xAxisOffset, x2: (options.width || Chartist.getWidth(svg._node)) - options.chartPadding, y2: options.chartPadding, width: function () { return this.x2 - this.x1; }, height: function () { return this.y1 - this.y2; } }; }; Chartist.createXAxis = function (chartRect, data, grid, labels, options) { // Create X-Axis data.labels.forEach(function (value, index) { var interpolatedValue = options.axisX.labelInterpolationFnc(value, index), pos = chartRect.x1 + chartRect.width() / data.labels.length * index; // If interpolated value returns falsey (except 0) we don't draw the grid line if (!interpolatedValue && interpolatedValue !== 0) { return; } if (options.axisX.showGrid) { grid.elem('line', { x1: pos, y1: chartRect.y1, x2: pos, y2: chartRect.y2 }, [options.classNames.grid, options.classNames.horizontal].join(' ')); } if (options.axisX.showLabel) { // Use config offset for setting labels of var label = labels.elem('text', { dx: pos + 2 }, [options.classNames.label, options.classNames.horizontal].join(' ')).text('' + interpolatedValue); // TODO: should use 'alignment-baseline': 'hanging' but not supported in firefox. Instead using calculated height to offset y pos label.attr({ dy: chartRect.y1 + Chartist.getHeight(label._node) + options.axisX.offset }); } }); }; Chartist.createYAxis = function (chartRect, bounds, grid, labels, offset, options) { // Create Y-Axis bounds.values.forEach(function (value, index) { var interpolatedValue = options.axisY.labelInterpolationFnc(value, index), pos = chartRect.y1 - chartRect.height() / bounds.values.length * index; // If interpolated value returns falsey (except 0) we don't draw the grid line if (!interpolatedValue && interpolatedValue !== 0) { return; } if (options.axisY.showGrid) { grid.elem('line', { x1: chartRect.x1, y1: pos, x2: chartRect.x2, y2: pos }, [options.classNames.grid, options.classNames.vertical].join(' ')); } if (options.axisY.showLabel) { labels.elem('text', { dx: options.axisY.labelAlign === 'right' ? offset - options.axisY.offset + options.chartPadding : options.chartPadding, dy: pos - 2, 'text-anchor': options.axisY.labelAlign === 'right' ? 'end' : 'start' }, [options.classNames.label, options.classNames.vertical].join(' ')).text('' + interpolatedValue); } }); }; Chartist.projectPoint = function (chartRect, bounds, data, index) { return { x: chartRect.x1 + chartRect.width() / data.length * index, y: chartRect.y1 - chartRect.height() * (data[index] - bounds.min) / (bounds.range + bounds.step) }; }; // Provides options handling functionality with callback for options changes triggered by responsive options and media query matches // TODO: With multiple media queries the handleMediaChange function is triggered too many times, only need one Chartist.optionsProvider = function (defaultOptions, options, responsiveOptions, optionsChangedCallbackFnc) { var baseOptions = Chartist.extend(Chartist.extend({}, defaultOptions), options), currentOptions, mediaQueryListeners = [], i; function applyOptions() { currentOptions = Chartist.extend({}, baseOptions); if (responsiveOptions) { for (i = 0; i < responsiveOptions.length; i++) { var mql = window.matchMedia(responsiveOptions[i][0]); if (mql.matches) { currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]); } } } optionsChangedCallbackFnc(currentOptions); return currentOptions; } if (!window.matchMedia) { throw 'window.matchMedia not found! Make sure you\'re using a polyfill.'; } else if (responsiveOptions) { for (i = 0; i < responsiveOptions.length; i++) { var mql = window.matchMedia(responsiveOptions[i][0]); mql.addListener(applyOptions); mediaQueryListeners.push(mql); } } return applyOptions(); }; // http://schepers.cc/getting-to-the-point Chartist.catmullRom2bezier = function (crp, z) { var d = []; for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) { var p = [ {x: +crp[i - 2], y: +crp[i - 1]}, {x: +crp[i], y: +crp[i + 1]}, {x: +crp[i + 2], y: +crp[i + 3]}, {x: +crp[i + 4], y: +crp[i + 5]} ]; if (z) { if (!i) { p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]}; } else if (iLen - 4 === i) { p[3] = {x: +crp[0], y: +crp[1]}; } else if (iLen - 2 === i) { p[2] = {x: +crp[0], y: +crp[1]}; p[3] = {x: +crp[2], y: +crp[3]}; } } else { if (iLen - 4 === i) { p[3] = p[2]; } else if (!i) { p[0] = {x: +crp[i], y: +crp[i + 1]}; } } d.push( [ (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y ] ); } return d; }; }(window, document, Chartist));;/** * Chartist SVG module for simple SVG DOM abstraction * * @module Chartist.svg */ /* global Chartist */ (function(window, document, Chartist) { 'use strict'; Chartist.svg = function(name, attributes, className, parent) { var svgns = 'http://www.w3.org/2000/svg'; function attr(node, attributes) { Object.keys(attributes).forEach(function(key) { node.setAttribute(key, attributes[key]); }); return node; } function elem(svg, name, attributes, className, parentNode) { var node = document.createElementNS(svgns, name); node._ctSvgElement = svg; if(parentNode) { parentNode.appendChild(node); } if(attributes) { attr(node, attributes); } if(className) { addClass(node, className); } return node; } function text(node, t) { node.appendChild(document.createTextNode(t)); } function empty(node) { while (node.firstChild) { node.removeChild(node.firstChild); } } function remove(node) { node.parentNode.removeChild(node); } function classes(node) { return node.getAttribute('class') ? node.getAttribute('class').trim().split(/\s+/) : []; } function addClass(node, names) { node.setAttribute('class', classes(node) .concat(names.trim().split(/\s+/)) .filter(function(elem, pos, self) { return self.indexOf(elem) === pos; }).join(' ') ); } function removeClass(node, names) { var removedClasses = names.trim().split(/\s+/); node.setAttribute('class', classes(node).filter(function(name) { return removedClasses.indexOf(name) === -1; }).join(' ')); } function removeAllClasses(node) { node.className = ''; } return { _node: elem(this, name, attributes, className, parent ? parent._node : undefined), _parent: parent, parent: function() { return this._parent; }, attr: function(attributes) { attr(this._node, attributes); return this; }, empty: function() { empty(this._node); return this; }, remove: function() { remove(this._node); return this; }, elem: function(name, attributes, className) { return Chartist.svg(name, attributes, className, this); }, text: function(t) { text(this._node, t); return this; }, addClass: function(names) { addClass(this._node, names); return this; }, removeClass: function(names) { removeClass(this._node, names); return this; }, removeAllClasses: function() { removeAllClasses(this._node); return this; }, classes: function() { return classes(this._node); } }; }; }(window, document, Chartist));;/** * The Chartist line chart can be used to draw Line or Scatter charts. If used in the browser you can access the global `Chartist` namespace where you find the `Line` function as a main entry point. * * For examples on how to use the line chart please check the examples of the `Chartist.Line` method. * * @module Chartist.Line */ /* global Chartist */ (function(window, document, Chartist){ 'use strict'; /** * This method creates a new line chart and returns an object handle to the internal closure. Currently you can use the returned object only for updating / redrawing the chart. * * @memberof Chartist.Line * @param {string|HTMLElement} query A selector query string or directly a DOM element * @param {object} data The data object that needs to consist of a labels and a series array * @param {object} [options] The options object with options that override the default options. Check the examples for a detailed list. * @param {array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]] * @return {object} An object with a version and an update method to manually redraw the chart * @function * * @example * // These are the default options of the line chart * var options = { * // Options for X-Axis * axisX: { * // The offset of the labels to the chart area * offset: 10, * // If labels should be shown or not * showLabel: true, * // If the axis grid should be drawn or not * showGrid: true, * // Interpolation function that allows you to intercept the value from the axis label * labelInterpolationFnc: function(value){return value;} * }, * // Options for Y-Axis * axisY: { * // The offset of the labels to the chart area * offset: 15, * // If labels should be shown or not * showLabel: true, * // If the axis grid should be drawn or not * showGrid: true, * // For the Y-Axis you can set a label alignment property of right or left * labelAlign: 'right', * // Interpolation function that allows you to intercept the value from the axis label * labelInterpolationFnc: function(value){return value;}, * // This value specifies the minimum height in pixel of the scale steps * scaleMinSpace: 30 * }, * // Specify a fixed width for the chart as a string (i.e. '100px' or '50%') * width: undefined, * // Specify a fixed height for the chart as a string (i.e. '100px' or '50%') * height: undefined, * // If the line should be drawn or not * showLine: true, * // If dots should be drawn or not * showPoint: true, * // Specify if the lines should be smoothed (Catmull-Rom-Splines will be used) * lineSmooth: true, * // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value * low: undefined, * // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value * high: undefined, * // Padding of the chart drawing area to the container element and labels * chartPadding: 5, * // Override the class names that get used to generate the SVG structure of the chart * classNames: { * chart: 'ct-chart-line', * label: 'ct-label', * series: 'ct-series', * line: 'ct-line', * point: 'ct-point', * grid: 'ct-grid', * vertical: 'ct-vertical', * horizontal: 'ct-horizontal' * } * }; * * @example * // Create a simple line chart * var data = { * // A labels array that can contain any sort of values * labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], * // Our series array that contains series objects or in this case series data arrays * series: [ * [5, 2, 4, 2, 0] * ] * }; * * // As options we currently only set a static size of 300x200 px * var options = { * width: '300px', * height: '200px' * }; * * // In the global name space Chartist we call the Line function to initialize a line chart. As a first parameter we pass in a selector where we would like to get our chart created. Second parameter is the actual data object and as a third parameter we pass in our options * Chartist.Line('.ct-chart', data, options); * * @example * // Create a line chart with responsive options * * var data = { * // A labels array that can contain any sort of values * labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'], * // Our series array that contains series objects or in this case series data arrays * series: [ * [5, 2, 4, 2, 0] * ] * }; * * // In adition to the regular options we specify responsive option overrides that will override the default configutation based on the matching media queries. * var responsiveOptions = [ * ['screen and (min-width: 641px) and (max-width: 1024px)', { * showPoint: false, * axisX: { * labelInterpolationFnc: function(value) { * // Will return Mon, Tue, Wed etc. on medium screens * return value.slice(0, 3); * } * } * }], * ['screen and (max-width: 640px)', { * showLine: false, * axisX: { * labelInterpolationFnc: function(value) { * // Will return M, T, W etc. on small screens * return value[0]; * } * } * }] * ]; * * Chartist.Line('.ct-chart', data, null, responsiveOptions); * */ Chartist.Line = function (query, data, options, responsiveOptions) { var defaultOptions = { axisX: { offset: 10, showLabel: true, showGrid: true, labelInterpolationFnc: Chartist.noop }, axisY: { offset: 15, showLabel: true, showGrid: true, labelAlign: 'right', labelInterpolationFnc: Chartist.noop, scaleMinSpace: 30 }, width: undefined, height: undefined, showLine: true, showPoint: true, lineSmooth: true, low: undefined, high: undefined, chartPadding: 5, classNames: { chart: 'ct-chart-line', label: 'ct-label', series: 'ct-series', line: 'ct-line', point: 'ct-point', grid: 'ct-grid', vertical: 'ct-vertical', horizontal: 'ct-horizontal' } }, currentOptions, svg; function createChart(options) { var xAxisOffset, yAxisOffset, seriesGroups = [], bounds, normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length); // Create new svg object svg = Chartist.createSvg(query, options.width, options.height, options.classNames.chart); // initialize bounds bounds = Chartist.getBounds(svg, normalizedData, options); xAxisOffset = options.axisX.offset; if (options.axisX.showLabel) { xAxisOffset += Chartist.calculateLabelOffset( svg, data.labels, [options.classNames.label, options.classNames.horizontal].join(' '), options.axisX.labelInterpolationFnc, Chartist.getHeight ); } yAxisOffset = options.axisY.offset; if (options.axisY.showLabel) { yAxisOffset += Chartist.calculateLabelOffset( svg, bounds.values, [options.classNames.label, options.classNames.horizontal].join(' '), options.axisY.labelInterpolationFnc, Chartist.getWidth ); } var chartRect = Chartist.createChartRect(svg, options, xAxisOffset, yAxisOffset); // Start drawing var labels = svg.elem('g'), grid = svg.elem('g'); Chartist.createXAxis(chartRect, data, grid, labels, options); Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options); // Draw the series // initialize series groups for (var i = 0; i < data.series.length; i++) { seriesGroups[i] = svg.elem('g'); // Use series class from series data or if not set generate one seriesGroups[i].addClass([ options.classNames.series, (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)) ].join(' ')); var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], 0), pathCoordinates = [p.x, p.y], point; // First dot we need to add before loop if (options.showPoint) { // Small offset for Firefox to render squares correctly point = seriesGroups[i].elem('line', { x1: p.x, y1: p.y, x2: p.x + 0.01, y2: p.y }, options.classNames.point); } // First point is created, continue with rest for (var j = 1; j < normalizedData[i].length; j++) { p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j); pathCoordinates.push(p.x, p.y); //If we should show points we need to create them now to avoid secondary loop // Small offset for Firefox to render squares correctly if (options.showPoint) { point = seriesGroups[i].elem('line', { x1: p.x, y1: p.y, x2: p.x + 0.01, y2: p.y }, options.classNames.point); } } if (options.showLine) { var svgPathString = 'M' + pathCoordinates[0] + ',' + pathCoordinates[1] + ' '; // If smoothed path and path has more than two points then use catmull rom to bezier algorithm if (options.lineSmooth && pathCoordinates.length > 4) { var cr = Chartist.catmullRom2bezier(pathCoordinates); for(var k = 0; k < cr.length; k++) { svgPathString += 'C' + cr[k].join(); } } else { for(var l = 3; l < pathCoordinates.length; l += 2) { svgPathString += 'L ' + pathCoordinates[l - 1] + ',' + pathCoordinates[l]; } } seriesGroups[i].elem('path', { d: svgPathString }, options.classNames.line); } } } // Obtain current options based on matching media queries (if responsive options are given) // This will also register a listener that is re-creating the chart based on media changes currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) { currentOptions = changedOptions; createChart(currentOptions); }); // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance. // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage. // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj // The problem is with the label offsets that can't be converted into percentage and affecting the chart container window.addEventListener('resize', function () { createChart(currentOptions); }); // Public members return { version: Chartist.version, update: function () { createChart(currentOptions); } }; }; }(window, document, Chartist)); ;/** * The bar chart module of Chartist that can be used to draw unipolar or bipolar bar and grouped bar charts. * * @module Chartist.Bar */ /* global Chartist */ (function(window, document, Chartist){ 'use strict'; /** * This method creates a new bar chart and returns an object handle with delegations to the internal closure of the bar chart. You can use the returned object to redraw the chart. * * @memberof Chartist.Bar * @param {string|HTMLElement} query A selector query string or directly a DOM element * @param {object} data The data object that needs to consist of a labels and a series array * @param {object} [options] The options object with options that override the default options. Check the examples for a detailed list. * @param {array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]] * @return {object} An object with a version and an update method to manually redraw the chart * @function * * @example * // These are the default options of the line chart * var options = { * // Options for X-Axis * axisX: { * // The offset of the labels to the chart area * offset: 10, * // If labels should be shown or not * showLabel: true, * // If the axis grid should be drawn or not * showGrid: true, * // Interpolation function that allows you to intercept the value from the axis label * labelInterpolationFnc: function(value){return value;} * }, * // Options for Y-Axis * axisY: { * // The offset of the labels to the chart area * offset: 15, * // If labels should be shown or not * showLabel: true, * // If the axis grid should be drawn or not * showGrid: true, * // For the Y-Axis you can set a label alignment property of right or left * labelAlign: 'right', * // Interpolation function that allows you to intercept the value from the axis label * labelInterpolationFnc: function(value){return value;}, * // This value specifies the minimum height in pixel of the scale steps * scaleMinSpace: 30 * }, * // Specify a fixed width for the chart as a string (i.e. '100px' or '50%') * width: undefined, * // Specify a fixed height for the chart as a string (i.e. '100px' or '50%') * height: undefined, * // If the line should be drawn or not * showLine: true, * // If dots should be drawn or not * showPoint: true, * // Specify if the lines should be smoothed (Catmull-Rom-Splines will be used) * lineSmooth: true, * // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value * low: undefined, * // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value * high: undefined, * // Padding of the chart drawing area to the container element and labels * chartPadding: 5, * // Specify the distance in pixel of bars in a group * seriesBarDistance: 15, * // Override the class names that get used to generate the SVG structure of the chart * classNames: { * chart: 'ct-chart-bar', * label: 'ct-label', * series: 'ct-series', * bar: 'ct-bar', * point: 'ct-point', * grid: 'ct-grid', * vertical: 'ct-vertical', * horizontal: 'ct-horizontal' * } * }; * * @example * // Create a simple bar chart * var data = { * labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], * series: [ * [5, 2, 4, 2, 0] * ] * }; * * // In the global name space Chartist we call the Bar function to initialize a bar chart. As a first parameter we pass in a selector where we would like to get our chart created and as a second parameter we pass our data object. * Chartist.Bar('.ct-chart', data); * * @example * // This example creates a bipolar grouped bar chart where the boundaries are limitted to -10 and 10 * Chartist.Bar('.ct-chart', { * labels: [1, 2, 3, 4, 5, 6, 7], * series: [ * [1, 3, 2, -5, -3, 1, -6], * [-5, -2, -4, -1, 2, -3, 1] * ] * }, { * seriesBarDistance: 12, * low: -10, * heigh: 10 * }); * */ Chartist.Bar = function (query, data, options, responsiveOptions) { var defaultOptions = { axisX: { offset: 10, showLabel: true, showGrid: true, labelInterpolationFnc: Chartist.noop }, axisY: { offset: 15, showLabel: true, showGrid: true, labelAlign: 'right', labelInterpolationFnc: Chartist.noop, scaleMinSpace: 40 }, width: undefined, height: undefined, high: undefined, low: undefined, chartPadding: 5, seriesBarDistance: 15, classNames: { chart: 'ct-chart-bar', label: 'ct-label', series: 'ct-series', bar: 'ct-bar', thin: 'ct-thin', thick: 'ct-thick', grid: 'ct-grid', vertical: 'ct-vertical', horizontal: 'ct-horizontal' } }, currentOptions, svg; function createChart(options) { var xAxisOffset, yAxisOffset, seriesGroups = [], bounds, normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length); // Create new svg element svg = Chartist.createSvg(query, options.width, options.height, options.classNames.chart); // initialize bounds bounds = Chartist.getBounds(svg, normalizedData, options, 0); xAxisOffset = options.axisX.offset; if (options.axisX.showLabel) { xAxisOffset += Chartist.calculateLabelOffset( svg, data.labels, [options.classNames.label, options.classNames.horizontal].join(' '), options.axisX.labelInterpolationFnc, Chartist.getHeight ); } yAxisOffset = options.axisY.offset; if (options.axisY.showLabel) { yAxisOffset += Chartist.calculateLabelOffset( svg, bounds.values, [options.classNames.label, options.classNames.horizontal].join(' '), options.axisY.labelInterpolationFnc, Chartist.getWidth ); } var chartRect = Chartist.createChartRect(svg, options, xAxisOffset, yAxisOffset); // Start drawing var labels = svg.elem('g'), grid = svg.elem('g'), // Projected 0 point zeroPoint = Chartist.projectPoint(chartRect, bounds, [0], 0); Chartist.createXAxis(chartRect, data, grid, labels, options); Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options); // Draw the series // initialize series groups for (var i = 0; i < data.series.length; i++) { // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc. var biPol = i - (data.series.length - 1) / 2, // Half of the period with between vertical grid lines used to position bars periodHalfWidth = chartRect.width() / normalizedData[i].length / 2; seriesGroups[i] = svg.elem('g'); // Use series class from series data or if not set generate one seriesGroups[i].addClass([ options.classNames.series, (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)) ].join(' ')); for(var j = 0; j < normalizedData[i].length; j++) { var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j), bar; // Offset to center bar between grid lines and using bi-polar offset for multiple series // TODO: Check if we should really be able to add classes to the series. Should be handles with SASS and semantic / specific selectors p.x += periodHalfWidth + (biPol * options.seriesBarDistance); bar = seriesGroups[i].elem('line', { x1: p.x, y1: zeroPoint.y, x2: p.x, y2: p.y }, options.classNames.bar + (data.series[i].barClasses ? ' ' + data.series[i].barClasses : '')); } } } // Obtain current options based on matching media queries (if responsive options are given) // This will also register a listener that is re-creating the chart based on media changes currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) { currentOptions = changedOptions; createChart(currentOptions); }); // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance. // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage. // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj // The problem is with the label offsets that can't be converted into percentage and affecting the chart container window.addEventListener('resize', function () { createChart(currentOptions); }); // Public members return { version: Chartist.version, update: function () { createChart(currentOptions); } }; }; }(window, document, Chartist)); ;/** * The pie chart module of Chartist that can be used to draw pie, donut or gauge charts * * @module Chartist.Pie */ /* global Chartist */ (function(window, document, Chartist) { 'use strict'; /** * This method creates a new pie chart and returns an object that can be used to redraw the chart. * * @memberof Chartist.Pie * @param {string|HTMLElement} query A selector query string or directly a DOM element * @param {object} data The data object in the pie chart needs to have a series property with a one dimensional data array. The values will be normalized against each other and don't necessarily need to be in percentage. * @param {object} [options] The options object with options that override the default options. Check the examples for a detailed list. * @param {array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]] * @return {object} An object with a version and an update method to manually redraw the chart * @function * * @example * // Default options of the pie chart * var defaultOptions = { * // Specify a fixed width for the chart as a string (i.e. '100px' or '50%') * width: undefined, * // Specify a fixed height for the chart as a string (i.e. '100px' or '50%') * height: undefined, * // Padding of the chart drawing area to the container element and labels * chartPadding: 5, * // Override the class names that get used to generate the SVG structure of the chart * classNames: { * chart: 'ct-chart-pie', * series: 'ct-series', * slice: 'ct-slice', * donut: 'ct-donut', label: 'ct-label' * }, * // The start angle of the pie chart in degrees where 0 points north. A higher value offsets the start angle clockwise. * startAngle: 0, * // An optional total you can specify. By specifying a total value, the sum of the values in the series must be this total in order to draw a full pie. You can use this parameter to draw only parts of a pie or gauge charts. * total: undefined, * // If specified the donut CSS classes will be used and strokes will be drawn instead of pie slices. * donut: false, * // Specify the donut stroke width, currently done in javascript for convenience. May move to CSS styles in the future. * donutWidth: 60, * // If a label should be shown or not * showLabel: true, * // Label position offset from the standard position which is half distance of the radius. This value can be either positive or negative. Positive values will position the label away from the center. * labelOffset: 0, * // An interpolation function for the label value * labelInterpolationFnc: function(value, index) {return value;}, * // Label direction can be 'neutral', 'explode' or 'implode'. The labels anchor will be positioned based on those settings as well as the fact if the labels are on the right or left side of the center of the chart. Usually explode is useful when labels are positioned far away from the center. * labelDirection: 'neutral' * }; * * @example * // Simple pie chart example with four series * Chartist.Pie('.ct-chart', { * series: [10, 2, 4, 3] * }); * * @example * // Drawing a donut chart * Chartist.Pie('.ct-chart', { * series: [10, 2, 4, 3] * }, { * donut: true * }); * * @example * // Using donut, startAngle and total to draw a gauge chart * Chartist.Pie('.ct-chart', { * series: [20, 10, 30, 40] * }, { * donut: true, * donutWidth: 20, * startAngle: 270, * total: 200 * }); * * @example * // Drawing a pie chart with padding and labels that are outside the pie * Chartist.Pie('.ct-chart', { * series: [20, 10, 30, 40] * }, { * chartPadding: 30, * labelOffset: 50, * labelDirection: 'explode' * }); */ Chartist.Pie = function (query, data, options, responsiveOptions) { var defaultOptions = { width: undefined, height: undefined, chartPadding: 5, classNames: { chart: 'ct-chart-pie', series: 'ct-series', slice: 'ct-slice', donut: 'ct-donut', label: 'ct-label' }, startAngle: 0, total: undefined, donut: false, donutWidth: 60, showLabel: true, labelOffset: 0, labelInterpolationFnc: Chartist.noop, labelOverflow: false, labelDirection: 'neutral' }, currentOptions, svg; function determineAnchorPosition(center, label, direction) { var toTheRight = label.x > center.x; if(toTheRight && direction === 'explode' || !toTheRight && direction === 'implode') { return 'start'; } else if(toTheRight && direction === 'implode' || !toTheRight && direction === 'explode') { return 'end'; } else { return 'middle'; } } function createChart(options) { var seriesGroups = [], chartRect, radius, labelRadius, totalDataSum, startAngle = options.startAngle, dataArray = Chartist.getDataArray(data); // Create SVG.js draw svg = Chartist.createSvg(query, options.width, options.height, options.classNames.chart); // Calculate charting rect chartRect = Chartist.createChartRect(svg, options, 0, 0); // Get biggest circle radius possible within chartRect radius = Math.min(chartRect.width() / 2, chartRect.height() / 2); // Calculate total of all series to get reference value or use total reference from optional options totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) { return previousValue + currentValue; }, 0); // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside // Unfortunately this is not possible with the current SVG Spec // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html radius -= options.donut ? options.donutWidth / 2 : 0; // If a donut chart then the label position is at the radius, if regular pie chart it's half of the radius // see https://github.com/gionkunz/chartist-js/issues/21 labelRadius = options.donut ? radius : radius / 2; // Add the offset to the labelRadius where a negative offset means closed to the center of the chart labelRadius += options.labelOffset; // Calculate end angle based on total sum and current data value and offset with padding var center = { x: chartRect.x1 + chartRect.width() / 2, y: chartRect.y2 + chartRect.height() / 2 }; // Draw the series // initialize series groups for (var i = 0; i < data.series.length; i++) { seriesGroups[i] = svg.elem('g'); // Use series class from series data or if not set generate one seriesGroups[i].addClass([ options.classNames.series, (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i)) ].join(' ')); var endAngle = startAngle + dataArray[i] / totalDataSum * 360; // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle // with Z and use 359.99 degrees if(endAngle - startAngle === 360) { endAngle -= 0.01; } var start = Chartist.polarToCartesian(center.x, center.y, radius, startAngle - (i === 0 ? 0 : 0.2)), end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle), arcSweep = endAngle - startAngle <= 180 ? '0' : '1', d = [ // Start at the end point from the cartesian coordinates 'M', end.x, end.y, // Draw arc 'A', radius, radius, 0, arcSweep, 0, start.x, start.y ]; // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie if(options.donut === false) { d.push('L', center.x, center.y); } // Create the SVG path // If this is a donut chart we add the donut class, otherwise just a regular slice var path = seriesGroups[i].elem('path', { d: d.join(' ') }, options.classNames.slice + (options.donut ? ' ' + options.classNames.donut : '')); // If this is a donut, we add the stroke-width as style attribute if(options.donut === true) { path.attr({ 'style': 'stroke-width: ' + (+options.donutWidth) + 'px' }); } // If we need to show labels we need to add the label for this slice now if(options.showLabel) { // Position at the labelRadius distance from center and between start and end angle var labelPosition = Chartist.polarToCartesian(center.x, center.y, labelRadius, startAngle + (endAngle - startAngle) / 2), interpolatedValue = options.labelInterpolationFnc(data.labels ? data.labels[i] : dataArray[i], i); seriesGroups[i].elem('text', { dx: labelPosition.x, dy: labelPosition.y, 'text-anchor': determineAnchorPosition(center, labelPosition, options.labelDirection), text: '' + interpolatedValue }, options.classNames.label).text('' + interpolatedValue); } // Set next startAngle to current endAngle. Use slight offset so there are no transparent hairline issues // (except for last slice) startAngle = endAngle; } } // Obtain current options based on matching media queries (if responsive options are given) // This will also register a listener that is re-creating the chart based on media changes currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) { currentOptions = changedOptions; createChart(currentOptions); }); // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance. // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage. // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj // The problem is with the label offsets that can't be converted into percentage and affecting the chart container window.addEventListener('resize', function () { createChart(currentOptions); }); // Public members return { version: Chartist.version, update: function () { createChart(currentOptions); } }; }; }(window, document, Chartist)); return Chartist; })); "
]
}